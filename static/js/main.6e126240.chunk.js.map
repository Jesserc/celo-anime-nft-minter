{"version":3,"sources":["components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","components/minter/Cover.js","utils/minter.js","components/minter/nfts/Add.js","hooks/useMinterContract.js","hooks/useContract.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","assets/img/nft_geo_cover.png","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Cover","name","coverImg","connect","background","minHeight","maxWidth","src","alt","Button","catch","e","console","log","makeFileObjects","file","blob","Blob","JSON","stringify","type","File","client","Web3Storage","token","storeFiles","files","put","cid","createNft","minterContract","performActions","description","ipfsImage","ownerAddress","attributes","kit","defaultAccount","data","image","owner","url","methods","safeMint","send","from","transaction","uploadFileToWebStorage","rootCid","get","res","getNfts","nfts","totalSupply","call","nftsLength","i","nft","Promise","resolve","tokenURI","fetchNftMeta","meta","parse","fetchNftOwner","index","push","Number","all","ipfsUrl","axios","ownerOf","fetchNftContractOwner","fetchNftOwnerTipBalance","nftOwners","bal","nftOwner","tokenOnwerTipBalance","ownerBal","tipAnNftOwner","tipNftOwner","value","GENDER","ANIME_GENRE","AddNfts","save","useState","setName","setIpfsImage","setDescription","setAttributes","show","setShow","handleClose","setAttributesFunc","trait_type","attributeObject","arr","findIndex","el","oldArray","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","placeholder","onChange","imageUrl","alert","Label","hidden","map","gender","toLowerCase","genre","Footer","useMinterContract","abi","contractAddress","useContractKit","getConnectedKit","contract","setContract","getContract","useCallback","web3","eth","Contract","useContract","MyNFTAbi","MyNFTContractAddress","MyNFT","NftCard","tipBal","wei","nftOwnerTipBalance","undefined","utils","fromWei","Col","Card","Badge","bg","objectFit","Text","border","color","Row","attribute","key","borderRadius","fontSize","marginTop","margin","padding","boxShadow","Loader","role","NftList","setNfts","loading","setLoading","setNftOwner","setNftOwnerTipBalance","getAssets","allNfts","error","addNft","toast","fetchContractOwner","_address","fetchNftOwnerTippedBalance","ownerBalance","isMounted","Add","xs","sm","lg","_nft","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.6e126240.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({ address, size, ...rest }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\n      );\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest}>\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\nimport Identicon from \"./ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nconst Cover = ({ name, coverImg, connect }) => {\n  if (name) {\n    return (\n      <div\n        className=\"d-flex justify-content-center flex-column text-center \"\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\n      >\n        <div className=\"mt-auto text-light mb-5\">\n          <div\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\n            style={{ maxWidth: \"320px\" }}\n          >\n            <img src={coverImg} alt=\"\" />\n          </div>\n          <h1>{name}</h1>\n          <p>Please connect your wallet to continue.</p>\n          <Button\n            onClick={() => connect().catch((e) => console.log(e))}\n            variant=\"outline-light\"\n            className=\"rounded-pill px-3 mt-3\"\n          >\n            Connect Wallet\n          </Button>\n        </div>\n\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;\n","import { Web3Storage } from \"web3.storage/dist/bundle.esm.min.js\";\n\nimport axios from \"axios\";\n\nconst makeFileObjects = (file) => {\n  const blob = new Blob([JSON.stringify(file)], { type: \"application/json\" });\n  const files = [new File([blob], `${file.name}.json`)];\n  return files;\n};\nconst client = new Web3Storage({\n  token:\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweEE0MDk2MjJERmU3MDZjNzY3OUExOUM5NzU4Qjc3QzJmN2E4MjlkOTUiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2NjIwMjg2MjQwNzYsIm5hbWUiOiJjZWxvTmZ0RGVtbyJ9.VbInbK1Ud2MHgzuOEmgHH-VWQq7XJv9Q0-gdvC-wOOA\",\n});\n\nconst storeFiles = async (files) => {\n  const cid = await client.put(files);\n  return cid;\n};\nexport const createNft = async (\n  minterContract,\n  performActions,\n  { name, description, ipfsImage, ownerAddress, attributes }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !ipfsImage) return;\n    const { defaultAccount } = kit;\n\n    // convert NFT metadata to JSON format\n    const data = JSON.stringify({\n      name,\n      description,\n      image: ipfsImage,\n      owner: defaultAccount,\n      attributes,\n    });\n\n    try {\n      // save NFT metadata to IPFS\n      const files = makeFileObjects(data);\n      const cid = await storeFiles(files);\n\n      // IPFS url for uploaded metadata\n      const url = `https://ipfs.io/ipfs/${cid}/undefined.json`;\n\n      // mint the NFT and save the IPFS url to the blockchain\n      let transaction = await minterContract.methods\n        .safeMint(ownerAddress, url)\n        .send({ from: defaultAccount });\n\n      return transaction;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  });\n};\n// ...\nexport const uploadFileToWebStorage = async (e) => {\n  // Construct with token and endpoint\n\n  const file = e.target.files;\n  if (!file) return;\n  // Pack files into a CAR and send to web3.storage\n  const rootCid = await client.put(file); // Promise<CIDString>\n\n  // Fetch and verify files from web3.storage\n  const res = await client.get(rootCid); // Promise<Web3Response | null>\n  const files = await res.files(); // Promise<Web3File[]>\n\n  return `https://ipfs.io/ipfs/${files[0].cid}`;\n};\nexport const getNfts = async (minterContract) => {\n  try {\n    const nfts = [];\n    const nftsLength = await minterContract.methods.totalSupply().call();\n    for (let i = 0; i < Number(nftsLength); i++) {\n      const nft = new Promise(async (resolve) => {\n        const res = await minterContract.methods.tokenURI(i).call();\n        const meta = await fetchNftMeta(res);\n        const data = await JSON.parse(meta.data);\n        const owner = await fetchNftOwner(minterContract, i);\n        resolve({\n          index: i,\n          owner,\n          name: data.name,\n          image: data.image,\n          description: data.description,\n          attributes: data.attributes,\n        });\n      });\n      nfts.push(nft);\n    }\n    return Promise.all(nfts);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const fetchNftMeta = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    const meta = await axios.get(ipfsUrl);\n    return meta;\n  } catch (e) {\n    console.log({ e });\n  }\n};\nexport const fetchNftOwner = async (minterContract, index) => {\n  try {\n    return await minterContract.methods.ownerOf(index).call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const fetchNftContractOwner = async (minterContract) => {\n  try {\n    let owner = await minterContract.methods.owner().call();\n    return owner;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const fetchNftOwnerTipBalance = async (minterContract) => {\n  try {\n    const nftOwners = [];\n    const nftsLength = await minterContract.methods.totalSupply().call();\n    for (let i = 0; i < Number(nftsLength); i++) {\n      const bal = new Promise(async (resolve) => {\n        const nftOwner = await minterContract.methods.ownerOf(i).call();\n        // console.log(res);\n        // const data = await JSON.parse(res);\n        // console.log(data);\n        const ownerBal = await minterContract.methods\n          .tokenOnwerTipBalance(i, nftOwner)\n          .call();\n        // console.log(ownerBal);\n        resolve({\n          nftOwner,\n          ownerBal,\n        });\n      });\n\n      nftOwners.push(bal);\n    }\n    return Promise.all(nftOwners);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const tipAnNftOwner = async (minterContract, performActions, index) => {\n  await performActions(async (kit) => {\n    const { defaultAccount } = kit;\n\n    try {\n      let transaction = await minterContract.methods\n        .tipNftOwner(index)\n        .send({ value: \"50000000000000000\", from: defaultAccount });\n      return transaction;\n    } catch (error) {}\n  });\n};\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadFileToWebStorage } from \"../../../utils/minter\";\n\nconst GENDER = [\"Male\", \"Female\"];\nconst ANIME_GENRE = [\"Adventure\", \"Action\", \"Seinen\", \"Shounen\", \"Mecha\"];\nconst AddNfts = ({ save, address }) => {\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [attributes, setAttributes] = useState([]);\n  const [show, setShow] = useState(false);\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  // add an attribute to an NFT\n  const setAttributesFunc = (e, trait_type) => {\n    const { value } = e.target;\n    const attributeObject = {\n      trait_type,\n      value,\n    };\n    const arr = attributes;\n\n    // check if attribute already exists\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\n\n    if (index >= 0) {\n      // update the existing attribute\n      arr[index] = {\n        trait_type,\n        value,\n      };\n      setAttributes(arr);\n      return;\n    }\n\n    // add a new attribute\n    setAttributes((oldArray) => [...oldArray, attributeObject]);\n  };\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"></i>\n      </Button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Create Anime NFT</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name of Anime NFT\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const imageUrl = await uploadFileToWebStorage(e);\n                if (!imageUrl) {\n                  alert(\"failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n              placeholder=\"Product name\"\n            ></Form.Control>\n            <Form.Label>\n              <h5>Properties</h5>\n            </Form.Label>\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"gender\");\n              }}\n              placeholder=\"Anime Gender\"\n            >\n              <option hidden>Anime NFT Gender</option>\n              {GENDER.map((gender) => (\n                <option\n                  key={`gender-${gender.toLowerCase()}`}\n                  value={gender.toLowerCase()}\n                >\n                  {gender}\n                </option>\n              ))}\n            </Form.Control>\n\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"genre\");\n              }}\n              placeholder=\"Anime NFT Genre\"\n            >\n              <option hidden>Anime NFT Genre</option>\n              {ANIME_GENRE.map((genre) => (\n                <option\n                  key={`genre-${genre.toLowerCase()}`}\n                  value={genre.toLowerCase()}\n                >\n                  {genre}\n                </option>\n              ))}\n            </Form.Control>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            onClick={() => {\n              save({\n                name,\n                ipfsImage,\n                description,\n                ownerAddress: address,\n                attributes,\n              });\n              handleClose();\n            }}\n          >\n            Create NFT\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\nAddNfts.propTypes = {\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;\n","import { useContract } from \"./useContract\";\nimport MyNFTAbi from \"../contracts/MyNFT.json\";\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\n\nexport const useMinterContract = () =>\n  useContract(MyNFTAbi.abi, MyNFTContractAddress.MyNFT);\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import { React, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../../utils\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport Identicon from \"../../ui/Identicon\";\nimport { tipAnNftOwner } from \"../../../utils/minter\";\nimport { useMinterContract } from \"../../../hooks/useMinterContract\";\nconst NftCard = ({ nft, nftOwnerTipBalance }) => {\n  const { image, description, owner, name, index, attributes } = nft;\n  const { performActions, address, kit } = useContractKit();\n\n  //function to format nft owner tipped balance\n  const formatWei = (wei) => {\n    let bal = kit.web3.utils.fromWei(wei);\n    return bal;\n  };\n  //variable for nft owner tipped amount\n  var tipBal;\n  //wait till state updates and not equal to undefined\n  if (nftOwnerTipBalance !== undefined) {\n    const { nftOwner, ownerBal } = nftOwnerTipBalance;\n    const newOwnerBal = formatWei(ownerBal);\n    tipBal = newOwnerBal;\n  }\n  const minterContract = useMinterContract();\n\n  const tip = (id) => {\n    tipAnNftOwner(minterContract, performActions, id);\n  };\n  return (\n    <Col key={index}>\n      <Card className=\" h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Identicon address={owner} size={28} />\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(owner)}\n            </span>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {index} ID\n            </Badge>\n          </Stack>\n        </Card.Header>\n\n        <div className=\" ratio ratio-4x3\">\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\n        </div>\n\n        <Card.Body className=\"d-flex  flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n\n          <Card.Text\n            className=\"flex-grow-1 font-monospace rounded bg-light\"\n            style={{\n              border: \"1px solid rgba(51, 51, 51, 0.05)\",\n              color: \"green\",\n            }}\n          >\n            tipped balance: {tipBal} CELO\n          </Card.Text>\n\n          <div>\n            <Row className=\"mt-2\">\n              {attributes.map((attribute, key) => (\n                <Col key={key}>\n                  <div className=\"bordyer rounded bg-light\">\n                    <div className=\"text-secondary fw-lighter small text-capitalize\">\n                      {attribute.trait_type}\n                    </div>\n                    <div className=\"text-secondary text-capitalize font-monospace\">\n                      {attribute.value}\n                    </div>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n          </div>\n          <button\n            className=\"font-monospace\"\n            style={{\n              border: \"none\",\n              borderRadius: \"3px\",\n              fontSize: \"0.9rem\",\n              color: \"white\",\n              width: \"40%\",\n              marginTop: \"10px\",\n              margin: \"0 auto\",\n              padding: \"5px 20px\",\n              background: \"#298e46\",\n              boxShadow: \"rgba(20, 70, 32, .2) 0 1px 0 inset\",\n            }}\n            onClick={() => tip(index)}\n          >\n            tip owner\n          </button>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nNftCard.propTypes = {\n  // props passed into this component\n  nft: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default NftCard;\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getNfts,\n  createNft,\n  fetchNftContractOwner,\n  fetchNftOwnerTipBalance,\n} from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\n\nconst NftList = ({ minterContract, name }) => {\n  const { performActions, address } = useContractKit();\n\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [nftOwner, setNftOwner] = useState(null);\n  const [nftOwnerTipBalance, setNftOwnerTipBalance] = useState([]);\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n      const allNfts = await getNfts(minterContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [minterContract]);\n\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n      await createNft(minterContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchContractOwner = useCallback(async (minterContract) => {\n    // get the address that deployed the NFT contract\n    const _address = await fetchNftContractOwner(minterContract);\n    setNftOwner(_address);\n  }, []);\n\n  const fetchNftOwnerTippedBalance = useCallback(async (minterContract) => {\n    const ownerBalance = await fetchNftOwnerTipBalance(minterContract);\n    if (!ownerBalance) return;\n    setNftOwnerTipBalance(ownerBalance);\n  }, []);\n\n  //return the tipped balance of an nft owner based on the nft id/index\n  const returnTippedBalance = (index) => {\n    return nftOwnerTipBalance[index];\n  };\n\n  useEffect(() => {\n    let isMounted = true; // note mutable flag\n    if (isMounted) {\n      try {\n        if (address && minterContract) {\n          getAssets();\n          fetchContractOwner(minterContract);\n          fetchNftOwnerTippedBalance(minterContract);\n        }\n      } catch (error) {\n        console.log({ error });\n      }\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    minterContract,\n    address,\n    getAssets,\n    fetchContractOwner,\n    fetchNftOwnerTippedBalance,\n  ]);\n\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\n              {nftOwner === address ? (\n                <AddNfts save={addNft} address={address} />\n              ) : null}\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n              {\n                nftOwnerTipBalance &&\n                  nftOwnerTipBalance !== undefined &&\n                  // nftOwnerTipBalance.map((bal) =>\n                  nfts.map((_nft) => (\n                    <Nft\n                      key={_nft.index}\n                      nft={{\n                        ..._nft,\n                      }}\n                      nftOwnerTipBalance={returnTippedBalance(_nft.index)}\n                    />\n                  ))\n                // )\n              }\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n  minterContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  minterContract: null,\n};\n\nexport default NftList;\n","export default __webpack_public_path__ + \"static/media/nft_geo_cover.881ecc0e.png\";","import React from \"react\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/Wallet\";\nimport Cover from \"./components/minter/Cover\";\nimport Nfts from \"./components/minter/nfts\";\nimport { useBalance, useMinterContract } from \"./hooks\";\nimport coverImg from \"./assets/img/nft_geo_cover.png\";\nimport \"./App.css\";\n\nconst App = function AppWrapper() {\n  const { address, destroy, connect } = useContractKit();\n  const { balance, getBalance } = useBalance();\n  const minterContract = useMinterContract();\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              <Wallet\n                address={address}\n                amount={balance.CELO}\n                symbol=\"CELO\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            <Nfts\n              name=\"Anime Collection\"\n              updateBalance={getBalance}\n              minterContract={minterContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        <Cover name=\"Anime Collection\" coverImg={coverImg} connect={connect} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Celo Anime Collection\",\n        description: \"Anime Collection built on Celo\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}